package snake;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

public class GamePanel extends JPanel implements ActionListener
{
	static final int ScreenWidth = 1300;
	static final int ScreenHeight = 750;
	static final int UnitSize = 50;
	static final int GameUnits = (ScreenWidth * ScreenHeight) / (UnitSize * UnitSize);
	static int Delay = 175;
	final int x[] = new int[GameUnits];
	final int y[] = new int[GameUnits];
	int body = 6;
	int gefressen;
	int appleX;
	int appleY;
	char direction = 'R';
	boolean running = false;
	Timer timer;
	Random random;

	GamePanel()
	{
		random = new Random();
		this.setPreferredSize(new Dimension(ScreenWidth, ScreenHeight));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(new MyKeyAdapter());
		startGame();
	}

	public void startGame()
	{
		newApple();
		running = true;
		timer = new Timer(Delay, this);
		timer.start();
	}

	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		draw(g);
	}

	public void draw(Graphics g)
	{
		if (running)
		{
			g.setColor(Color.red);
			g.fillOval(appleX, appleY, UnitSize, UnitSize);
			for (int i = 0; i < body; i++)
			{
				if (i == 0)
				{
					g.setColor(Color.green);
					g.fillRect(x[i], y[i], UnitSize, UnitSize);
				} else
				{
					g.setColor(new Color(45, 180, 0));
					g.fillRect(x[i], y[i], UnitSize, UnitSize);
				}
			}
			g.setColor(Color.white);
			g.setFont(new Font("Arial", Font.BOLD, 40));
			FontMetrics metrics = getFontMetrics(g.getFont());
			g.drawString("Score: " + gefressen, (ScreenWidth - metrics.stringWidth("Score: " + gefressen)) / 2,
					g.getFont().getSize());
		} else
		{
			gameOver(g);
		}
	}

	public void move()
	{
		for (int i = body; i > 0; i--)
		{
			x[i] = x[i - 1];
			y[i] = y[i - 1];
		}
		switch (direction)
		{
		case 'U':
			y[0] = y[0] - UnitSize;
			break;

		case 'D':
			y[0] = y[0] + UnitSize;
			break;

		case 'L':
			x[0] = x[0] - UnitSize;
			break;

		case 'R':
			x[0] = x[0] + UnitSize;
			break;
		}
	}

	public void checkApple()
	{
		if ((x[0] == appleX) && (y[0] == appleY))
		{
			body++;
			gefressen++;
			Delay -= 2;
			System.out.println(Delay);
			newApple();
		}
	}

	public void newApple()
	{
		appleX = random.nextInt((int) (ScreenWidth / UnitSize)) * UnitSize;
		appleY = random.nextInt((int) (ScreenHeight / UnitSize)) * UnitSize;
	}

	public void checkCollisions()
	{
		// kopf kollidiert mit kÃ¶rper check
		for (int i = body; i > 0; i--)
		{
			if ((x[0] == x[i]) && (y[0] == y[i]))
			{
				running = false;
			}
		}

		// Schlangenkopf an linken Rand
		if (x[0] < 0)
		{
			running = false;
		}

		// Schlangenkopf an rechten Rand
		if (x[0] > ScreenWidth)
		{
			running = false;
		}

		// Schlangenkopf an oberen Rand
		if (y[0] < 0)
		{
			running = false;
		}

		// Schlangenkopf an unteren Rand
		if (y[0] > ScreenHeight)
		{
			running = false;
		}
		if (!running)
		{
			timer.stop();
		}
	}

	public void gameOver(Graphics g)
	{
		// Score wird eingeblendet
		g.setColor(Color.white);
		g.setFont(new Font("Arial", Font.BOLD, 40));
		FontMetrics metrics1 = getFontMetrics(g.getFont());
		g.drawString("Score: " + gefressen, (ScreenWidth - metrics1.stringWidth("Score: " + gefressen)) / 2,
				g.getFont().getSize());

		// Game Over text wird eingeblendet
		g.setColor(Color.red);
		g.setFont(new Font("Arial", Font.BOLD, 75));
		FontMetrics metrics2 = getFontMetrics(g.getFont());
		g.drawString("Game Over", (ScreenWidth - metrics2.stringWidth("Game Over")) / 2, ScreenHeight / 2);
	}

	public void actionPerformed(ActionEvent e)
	{
		if (running)
		{
			checkApple();
			move();
			checkCollisions();
		}
		repaint();
	}

	public class MyKeyAdapter extends KeyAdapter
	{

		@Override

		public void keyPressed(KeyEvent e)
		{
			switch (e.getKeyCode())
			{
			case KeyEvent.VK_LEFT:
			case KeyEvent.VK_A:

				if (direction != 'R')
				{
					direction = 'L';
				}
				break;
			case KeyEvent.VK_RIGHT:
			case KeyEvent.VK_D:
				if (direction != 'L')
				{
					direction = 'R';
				}
				break;
			case KeyEvent.VK_UP:
			case KeyEvent.VK_W:
				if (direction != 'D')
				{
					direction = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
			case KeyEvent.VK_S:
				if (direction != 'U')
				{
					direction = 'D';
				}
				break;
			}
		}
	}
}
